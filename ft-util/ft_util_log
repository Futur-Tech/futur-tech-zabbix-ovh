#!/bin/bash

declare -a arrayData
declare -a pathArray

usage()
{
    echo -e "\nUsage: $0 \
([-p <logfile_path>] \
[-s <alert|crit|err|warn|info|debug>] \
[-d <pipe-separated data>] [-i] <message> \n \
- You can supply several [-p path] \n \
- If no path are suppled script will look into \$LOG_FILE for path. Several path can be supplied separated by space. \n \
- If a file doesn't exist it will be created but not folder structure (if folder not existing, the path will be ignored).
- Default severity is \"info\"\n \
- Severity can be passed as int 0=info and 1-259=err
- You can supply several data either [-d data1 -d data2 -d data3] or [-d \"data1|data2|data3\"] \n \
- STDIN is accepted instead of <message> with [-i] option. This option must be last!\n \
" 1>&2
    exit 1
}

while getopts "ip::s::d::" o; do
    case "${o}" in
        i)
            acceptStdin=true
            ;;
        p)
            if [ ! -d "$(dirname "${OPTARG}")" ] 
            then
                echo -e  "\nft_util_log : Incorrect \$LOG_FILE path (folder missing): \"${pathArray[k]}\"\n" 1>&2;
            else
                pathArray+=("${OPTARG}")
            fi
            ;;
        s)
            case ${OPTARG} in
                alert|\
                crit|\
                err|\
                warn|\
                info)
                    s=${OPTARG}
                    ;;

                debug)
                    if [ "$LOG_DEBUG" = true ]; then s=${OPTARG}; else exit 0; fi 
                    ;;

                2[0-5][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])
                    s=err
                    ;;
                
                0)
                    s=info
                    ;;

                *)
                    echo -e  "\nft_util_log : Incorrect severity ${OPTARG}\nAvailable alert|crit|err|warn|info|debug\n" 1>&2;
                    usage
                    ;;
            esac
            ;;
        d)
            IFSx=$IFS
            IFS='|'
            for arg in $OPTARG
            do
                arrayData+=("${arg}")
            done        
            IFS=$IFSx
            ;;
        *)
            usage
            ;;
    esac
    [[ $acceptStdin ]] && break
done

shift "$((OPTIND - 1))"

echo_log () { 
    
    
    if [ -n "${log_msg}" ]
    then
        timestamp="$(date +\%Y-\%m-\%d\ \%H:\%M:\%S)"
        
        # Check if terminal support colors
        if command -v tput >/dev/null
        then
            term_colors=$(tput colors -T $TERM)
        else
            term_colors=2
        fi

        # First output to stdout with or formatting formatting 
        if [ -n "${term_colors}" ] && [ $term_colors -ge 8 ]
        then
            # Let's put some color
            # https://misc.flogisoft.com/bash/tip_colors_and_formatting
            case ${s} in
                alert) color="\e[41;93m" ;;
                crit) color="\e[41m" ;;
                err) color="\e[91m" ;;
                warn) color="\e[33m" ;;
                info) color="\e[94m" ;;
                debug) color="\e[92m" ;;
            esac

            echo -e "${color}${timestamp} ||\e[7m ${s} \e[27m|${data}|\e[0m ${log_msg}"
        else
            echo -e "${timestamp} || ${s} |${data}| ${log_msg}"
        fi

        # Output to file(s)
        for f in ${pathArray[@]}
        do
            echo -e "${timestamp} || ${s} |${data}| ${log_msg}" >> "${f}"
        done
    fi
}

if [ -z ${s} ]
then 
    s="info"
fi

if [[ ${#pathArray[@]} = 0 ]]
then
    pathArray=($LOG_FILE) # load the variable in an array
    for k in ${!pathArray[@]} # check path
    do 
        if [ ! -d "$(dirname "${pathArray[k]}")" ] 
        then
            echo -e  "\nft_util_log : Incorrect \$LOG_FILE path (folder missing): ${pathArray[k]}\n" 1>&2;
            unset pathArray[$k]
        fi
    done

    if [[ ${#pathArray[@]} = 0 ]]  # exit if there are still no path in the array
    then
        echo -e "\nft_util_log :  No log file path found." 1>&2; usage;        
    fi
fi

for i in ${!arrayData[@]}
do
    data="$data ${arrayData[i]} |"
done

if [ ! -t 0 ] && [[ $acceptStdin ]] # check if STDIN is open and loop it
then
    while read line
    do
        log_msg="${line}"
        echo_log
    done <&0
elif [ -n "$*" ] # check if normal argument input
then
    log_msg="$*"
    echo_log
fi
