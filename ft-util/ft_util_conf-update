#!/bin/bash

source "$(dirname "$0")/ft_util_inc_var"

usage() {
    echo "Usage: $0 \
[-s <path_source_conf>] \
[-r update all configs in folder path_destination_conf] \
[-d <path_destination_conf (it can be a folder if -r)>] \
[-y ask to continue if conf file variables have been modified]" 1>&2
    exit 1
}

while getopts "yrs:d:" o; do
    case "${o}" in
    s)
        source_conf="${OPTARG}"
        if [ ! -f "$source_conf" ]; then
            echo "$source_conf not a file."
            usage
        fi
        ;;

    d)
        dest_conf="${OPTARG}"
        ;;

    r)
        recursive=true
        ;;
    y)
        ask_continue=true
        ;;

    : | *)
        usage
        ;;
    esac
done
shift "$((OPTIND - 1))"

if [ -z "$source_conf" ] || [ -z "$dest_conf" ]; then usage; fi

modif_cnt=0 # Modification count

conf_update() {

    local sourceFile="$1"
    local targetFile="$2"

    $S_LOG -s debug -d $S_NAME -d "$targetFile" "Updating with $sourceFile"

    # Search: Looping through the existing conf file to store the variables and values into an array
    # Replace: Looping through the new conf file to find variables replace values if in the array
    declare -a arrSteps
    declare -A arrFiles
    declare -A arrConf
    arrSteps+=(search replace)
    arrFiles+=([search]=$targetFile [replace]=$sourceFile)

    for step in "${arrSteps[@]}"; do
        # empty the target file
        if [ "$step" = "replace" ]; then >"$targetFile"; fi

        # if search we loop throught the target
        # if replace we loop throught the source
        while IFS="" read -r line || [ -n "$line" ]; do
            # for debug
            # echo "$line"

            # Regex match example "export SSH_USER=root"
            ## Group 1: "export "
            ## Group 2: "SSH_USER"
            ## Group 3: "root"
            if [[ "$line" =~ ^([a-zA-Z_0-9]*\ )?([a-zA-Z_]+[a-zA-Z_0-9]*)=(.*) ]]; then

                # for debug
                # echo "step:$step file:${arrFiles[$step]} group1:${BASH_REMATCH[1]} group2:${BASH_REMATCH[2]} group3:${BASH_REMATCH[3]}"

                # if search step then store pair into array
                if [ "$step" = "search" ]; then arrConf[${BASH_REMATCH[2]}]=${BASH_REMATCH[3]}; fi

                if [ "$step" = "replace" ]; then
                    #check if variable name is in the array
                    if [ -n "${arrConf[${BASH_REMATCH[2]}]}" ] &&
                        [ "$recursive" = true ] && [ "${sourceFile##*/}" = "${targetFile##*/}" ]; then # This part of the IF statement is to force default value inside "template file" (when on recursive mode)

                        VALUE=${BASH_REMATCH[3]}
                        if [ "${arrConf[${BASH_REMATCH[2]}]}" != "${BASH_REMATCH[3]}" ]; then
                            VALUE=${BASH_REMATCH[3]}
                            ((modif_cnt++))
                            $S_LOG -s warn -d $S_NAME -d "$targetFile" "(Template) Default: ${BASH_REMATCH[2]}=$VALUE"
                        else
                            $S_LOG -s debug -d $S_NAME -d "$targetFile" "(Template) Kept: ${BASH_REMATCH[2]}=$VALUE"
                            unset arrConf[${BASH_REMATCH[2]}]
                        fi

                    elif [ -n "${arrConf[${BASH_REMATCH[2]}]}" ]; then
                        VALUE=${arrConf[${BASH_REMATCH[2]}]}
                        $S_LOG -s debug -d $S_NAME -d "$targetFile" "Kept: ${BASH_REMATCH[2]}=$VALUE"
                        unset arrConf[${BASH_REMATCH[2]}]
                    else
                        VALUE=${BASH_REMATCH[3]}
                        $S_LOG -s warn -d $S_NAME -d "$targetFile" "Default: ${BASH_REMATCH[2]}=$VALUE"
                        ((modif_cnt++))
                    fi
                    printf '%s\n' "${BASH_REMATCH[1]}${BASH_REMATCH[2]}=$VALUE" >>"$targetFile"
                fi
            else
                if [ "$step" = "replace" ]; then printf '%s\n' "$line" >>"$targetFile"; fi
            fi
        done <${arrFiles[$step]}
    done
    for index in "${!arrConf[@]}"; do $S_LOG -s warn -d $S_NAME -d "$targetFile" "Remove: $index=${arrConf[$index]}"; done
    unset $arrSteps
    unset $arrConf
    unset $arrFiles

    $S_LOG -d $S_NAME -d "$targetFile" "Updated with ${sourceFile/#$(dirname "$S_DIR_PATH")\//}" #Shorter path for better log view

}

conf_create() {
    mkdir -p "$(dirname "$dest_conf")" && cp "$source_conf" "$dest_conf"
    $S_LOG -s $? -d $S_NAME "Copy new $source_conf ----> $dest_conf"
    ((modif_cnt++))
}

check_conf_modified() {
    local target="$1"
    if [ $modif_cnt -gt 0 ]; then
        $S_LOG -s warn -d $S_NAME -d "$target" "Modification count: $modif_cnt"
        if [ "$ask_continue" = true ]; then
            echo "Press any key to continue, or Ctrl+C to abort..."
            read -n 1 -s
            $S_LOG -s debug -d $S_NAME "Continuing."
        fi
    fi
}

if [ "$recursive" = true ]; then
    if [ -d "$dest_conf" ]; then
        $S_LOG -d $S_NAME -d "$dest_conf" "Looping throught files in folder"
        for file in ${dest_conf%/}/*; do
            [ -f "$file" ] || break
            [ "${file##*.}" = "${source_conf##*.}" ] || continue # only process files with the same ext than the source

            cp "$file" "$file.$(date +\%Y\%m\%d\-\%H\%M\%S).bak" # Make a backup
            conf_update "$source_conf" "$file"                   # Update existing conf
            check_conf_modified "$file"                          # Check if conf has been modified
        done
        if [ -z "$(ls -A ${dest_conf})" ]; then
            conf_create # Create new conf
        else
            $S_DIR_PATH/ft_util_bak-cleaner "${dest_conf%/}/"
        fi

    else
        conf_create
    fi
    check_conf_modified "$dest_conf"

else
    if [ -f "$dest_conf" ]; then
        $S_LOG -s debug -d $S_NAME -d "$dest_conf" "Create backup of file $dest_conf"
        cp "$dest_conf" "$dest_conf.$(date +\%Y\%m\%d\-\%H\%M\%S).bak"

        conf_update "$source_conf" "$dest_conf"

        $S_DIR_PATH/ft_util_bak-cleaner "$(readlink -f "$dest_conf")"
    else
        conf_create
    fi
    check_conf_modified "$dest_conf"
fi
